@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Scripts{
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/exam.js"></script>
}
<table id="tblExam" class="table table-active" hidden>
    <thead>
        <tr>
            <th>ID</th>
            <th>ExamId</th>
            <th>StudentId</th>
        </tr>
    </thead>
    <tbody>
    </tbody>

</table>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/exam.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/bbbootstrap/libraries@main/choices.min.css">
    <link id="bootstrap-ltr" rel="stylesheet" href="~/css/bootstrap.css">
    <link id="bootstrap-rtl" rel="stylesheet" href="~/css/bootstrap2.css" disabled="">
</head>
<div class="row" style="border: 2px solid #ccc">
    <div id="carouselExampleDark" class="col-lg-10 carousel carousel-dark slide" data-bs-ride="carousel" data-bs-interval="false">

        <ol class="carousel-indicators">
            @for (int i = 0; i < 10; i++)
            {
                <li style="list-style : decimal; text-decoration : none" data-bs-target="#carouselExampleDark" data-bs-slide-to="@i" class="@(i.ToString() == "0" ? "active" : null )" aria-current="true" aria-label="Slide 1"></li>
            }
        </ol>
        <div class="carousel-inner" >
            @for (int i = 0; i < 10; i++)
            {
                <div class="carousel-item @(i.ToString() == "0" ? "active" : null )">
                    <div style="background-color:#fff; width:100%; height : 700px;padding:40px 130px 40px 130px;">
                        <h1 style="font-family : Tahoma; color:tomato">Soru - @(i + 1)</h1>
                        <hr/>
                        <p style="font-size :20px; font-family:Tahoma">
                            <b>Türkiye'nin başkenti neresidir?</b>
                        </p>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                            <label style="font-size:larger;font-family : Tahoma" class="form-check-label" for="flexRadioDefault1">
                                a) Ankara
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" checked>
                            <label style="font-size:larger;font-family : Tahoma" class="form-check-label" for="flexRadioDefault2">
                                b) İstanbul
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" checked>
                            <label style="font-size:larger;font-family : Tahoma" class="form-check-label" for="flexRadioDefault2">
                                c) Edirne
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" checked>
                            <label style="font-size:larger;font-family : Tahoma" class="form-check-label" for="flexRadioDefault2">
                                d) Kastamonu
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" checked>
                            <label style="font-size:larger;font-family : Tahoma" class="form-check-label" for="flexRadioDefault2">
                                e) Sakarya
                            </label>
                        </div>

                        <div class="form-check mt-5">
                            <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" checked>
                            <label style="font-size:larger;font-family : Tahoma" class="form-check-label" for="flexRadioDefault2">
                                 Seçimimi boş bırakacağım.
                            </label>
                        </div>
                    </div>
                </div>
            }
        </div>
        <button style="margin-left : -40px; width: 160px" class="carousel-control-prev" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button style="margin-right : -40px; width: 160px" class="carousel-control-next" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>
    <div class="col-lg-2" style="margin-top : 130px; margin-left: -25px">
        <div id="app"></div>
    </div>
</div>
<p id="timeRemain" hidden endDate="" startDate=""></p>
<script>
    var TIME_LIMIT;
    $(document).ready(function () {
        //var connection = new signalR.HubConnectionBuilder().withUrl("/examHub").build();
        //await connection.start();
        debugger;
        getExam(@ViewBag.examId);
        TIME_LIMIT = renderCountdown(new Date(), new Date("2023-05-01T19:31:23.85"));
        console.log(TIME_LIMIT)
        startTimer();

        //InvokeExams();
    })

    const FULL_DASH_ARRAY = 283;
    const WARNING_THRESHOLD = 10;
    const ALERT_THRESHOLD = 5;

    const COLOR_CODES = {
        info: {
            color: "green"
        },
        warning: {
            color: "orange",
            threshold: WARNING_THRESHOLD
        },
        alert: {
            color: "red",
            threshold: ALERT_THRESHOLD
        }
    };

    let timePassed = 0;
    let timeLeft = TIME_LIMIT;
    let timerInterval = null;
    let remainingPathColor = COLOR_CODES.info.color;

    document.getElementById("app").innerHTML = `
                <div class="base-timer">
                  <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                    <g class="base-timer__circle">
                      <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
                      <path
                        id="base-timer-path-remaining"
                        stroke-dasharray="283"
                        class="base-timer__path-remaining ${remainingPathColor}"
                        d="
                          M 50, 50
                          m -45, 0
                          a 45,45 0 1,0 90,0
                          a 45,45 0 1,0 -90,0
                        "
                      ></path>
                    </g>
                  </svg>
                  <span id="base-timer-label" class="base-timer__label">${formatTime(
        timeLeft
    )}</span>
                </div>
                `;


    function onTimesUp() {
        clearInterval(timerInterval);
    }

    function startTimer() {
        timerInterval = setInterval(() => {
            timePassed = timePassed += 1;
            timeLeft = TIME_LIMIT - timePassed;
            if (timeLeft < 0) {
                timeLeft = 0;
            }
            document.getElementById("base-timer-label").innerHTML = formatTime(
                timeLeft
            );
            setCircleDasharray();
            setRemainingPathColor(timeLeft);
            if (timeLeft === 0) {
                onTimesUp();
            }
        }, 1000);
    }

    function formatTime(time) {
        const minutes = Math.floor(time / 60);
        let seconds = time % 60;

        if (seconds < 10) {
            seconds = `0${seconds}`;
        }
        return `${minutes}:${seconds}`;
    }

    function setRemainingPathColor(timeLeft) {
        const { alert, warning, info } = COLOR_CODES;
        if (timeLeft <= alert.threshold) {
            document
                .getElementById("base-timer-path-remaining")
                .classList.remove(warning.color);
            document
                .getElementById("base-timer-path-remaining")
                .classList.add(alert.color);
        } else if (timeLeft <= warning.threshold) {
            document
                .getElementById("base-timer-path-remaining")
                .classList.remove(info.color);
            document
                .getElementById("base-timer-path-remaining")
                .classList.add(warning.color);
        }
    }

    function calculateTimeFraction() {
        const rawTimeFraction = timeLeft / TIME_LIMIT;
        return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
    }

    function setCircleDasharray() {
        const circleDasharray = `${(
            calculateTimeFraction() * FULL_DASH_ARRAY
        ).toFixed(0)} 283`;
        document
            .getElementById("base-timer-path-remaining")
            .setAttribute("stroke-dasharray", circleDasharray);
    }


    function renderCountdown(dateStart, dateEnd) {
        let currentDate = dateStart.getTime();
        let targetDate = dateEnd.getTime();
        var getCountdown = function (c) {
            let secondsLeft = Math.round(((targetDate - currentDate) / 1000));
            if (secondsLeft < 0) {
                return 0;
            }
            return secondsLeft;
        }
        var seconds = getCountdown();
        return seconds;
    }
</script>
