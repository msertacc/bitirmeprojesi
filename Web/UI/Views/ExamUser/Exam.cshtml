@using Entity.Domain.ApplicationUser;
@using Microsoft.AspNetCore.Identity;
@using System.Globalization;
@inject UserManager<ApplicationUser> _userManager;

@{
    if (User.Identity.IsAuthenticated)
    {
        ViewBag.IsVerify = _userManager.GetUserAsync(User).Result.IsVerify;
        ViewBag.FullName = _userManager.GetUserAsync(User).Result.FirstName + " " + _userManager.GetUserAsync(User).Result.LastName;
        ViewBag.UserId = _userManager.GetUserAsync(User).Result.Id;
    }
}
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model UI.Models.ViewModels.ExamProcessViewModel
@{
    var dateTime = Model.Exam?.ExamEndTime.Value;
}
@section Scripts{
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/exam.js"></script>
}
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/exam.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/bbbootstrap/libraries@main/choices.min.css">
</head>
<button class="form-control" onclick="SaveStudentAnswer()">Cevapları Kaydet</button>
<div class="row" style="border: 2px solid #ccc">
    <div id="carouselExampleDark" class="col-lg-10 carousel carousel-dark slide" data-bs-ride="carousel" data-bs-interval="false">
        <ol class="carousel-indicators">
            @for (int i = 0; i < Model.Question?.Count(); i++)
            {
                <li style="list-style : decimal; text-decoration : none" data-bs-target="#carouselExampleDark" data-bs-slide-to="@i" class="@(i.ToString() == "0" ? "active" : null )" aria-current="true" aria-label="Slide 1"></li>
            }
        </ol>
        <div class="carousel-inner">
            @foreach (var item in Model.Question.Select((x, i) => new { Value = x, Index = i }))
            {
                <div class="carousel-item @(item.Index.ToString() == "0" ? "active" : null )" value="@item.Value.Id">
                    <div style="background-color:#fff; width:100%; height : 700px;padding:40px 130px 40px 130px;">
                        <div style="float:left">
                            <h1 style="font-family : Tahoma; color:tomato">Soru - @(item.Index + 1)</h1>
                        </div>
                        <div class="mt-2" style="float:right;">
                            <p style="font-size: 20px; background-color: #057ff8;color:white"><b class="point" value="@item.Value.Score">Puan : @item.Value.Score </b></p>
                        </div>
                        <br /><br />
                        <hr />
                        <p style="font-size :20px; font-family:Tahoma">
                            <b class="question-text">@item.Value.QuestionText</b>
                        </p>
                        @foreach (var choice in Model.Choice.Where((x, i) => x.QuestionId == item.Value.Id).Select((x, i) => new { Value = x, Index = i }))
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="radio" choice="@choice.Value.Id" name="@item.Value.Id" id="flexRadioDefault1" value="@(Convert.ToChar(choice.Index + 65))">
                                <label style="font-size:larger;font-family : Tahoma" class="form-check-label" for="flexRadioDefault1" value="@(Convert.ToChar(choice.Index + 65))) @choice.Value.ChoiceExplanation">
                                    @(Convert.ToChar(choice.Index + 65))) @choice.Value.ChoiceExplanation
                                </label>
                            </div>
                        }
                        <div class="form-check mt-5">
                            <input class="form-check-input" type="radio" choice="999999999" name="@item.Value.Id" id="flexRadioDefault2" checked>
                            <label style="font-size:larger;font-family : Tahoma" class="form-check-label" for="flexRadioDefault2">
                                Seçimimi boş bırakacağım.
                            </label>
                        </div>
                    </div>
                </div>
            }
        </div>
        <button style="margin-left : -40px; width: 160px" class="carousel-control-prev" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button style="margin-right : -40px; width: 160px" class="carousel-control-next" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>
    <div class="col-lg-2" style="margin-top : 130px; margin-left: -25px">
        <div id="app"></div>
    </div>
</div>


<script>

    function SaveStudentAnswer() {
        var QuestionOfAnswer = [];
        var choice = "";

        $(".carousel-inner .carousel-item").each(function (e) {
            var questionId = $(this)[0].attributes.value.nodeValue;
            $(this).find('.form-check-input').each(function () {
                if ($(this).is(':checked')) {
                    choice = $(this)[0].attributes.choice.nodeValue;
                    var data = {
                        'ChoiceId': choice,
                        'QuestionId': questionId,
                    }
                    QuestionOfAnswer.push(data);
                }
            });
        });

        var model = {
            'AnswerList': QuestionOfAnswer,
            'ExamId': '@Model.Exam.Id',
            'UserId': '@ViewBag.UserId'
        }
        console.log(model);
        $.ajax({
            type: "POST",
            url: '@Url.Action("CreateQuestionOfAnswer", "ExamUser")',
            data: model,
            success: function (data) {
                console.log(data)
                console.log("basarili")
            },
            error: function () {
                QuestionOfAnswer = [];
            }
        });

    }

    var TIME_LIMIT;
    $(document).ready(function () {
        TIME_LIMIT = renderCountdown(new Date(), new Date('@dateTime?.Year', '@Convert.ToInt32(dateTime?.Month - 1)', '@dateTime?.Day', '@dateTime?.Hour', '@dateTime?.Minute', '@dateTime?.Second'));
        //verifyControl('@ViewBag.UserId');
        startTimer();
        getExam('@Model.Exam.Id');
        listener();
    })

    const FULL_DASH_ARRAY = 283;
    const WARNING_THRESHOLD = 10;
    const ALERT_THRESHOLD = 5;

    const COLOR_CODES = {
        info: {
            color: "green"
        },
        warning: {
            color: "orange",
            threshold: WARNING_THRESHOLD
        },
        alert: {
            color: "red",
            threshold: ALERT_THRESHOLD
        }
    };

    let timePassed = 0;
    let timeLeft = TIME_LIMIT;
    let timerInterval = null;
    let remainingPathColor = COLOR_CODES.info.color;

    document.getElementById("app").innerHTML = `
                                    <div class="base-timer">
                                      <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                        <g class="base-timer__circle">
                                          <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
                                          <path
                                            id="base-timer-path-remaining"
                                            stroke-dasharray="283"
                                            class="base-timer__path-remaining ${remainingPathColor}"
                                            d="
                                              M 50, 50
                                              m -45, 0
                                              a 45,45 0 1,0 90,0
                                              a 45,45 0 1,0 -90,0
                                            "
                                          ></path>
                                        </g>
                                      </svg>
                                      <span id="base-timer-label" class="base-timer__label">${formatTime(
        timeLeft
    )}</span>
                                    </div>
                                    `;


    function onTimesUp() {
        clearInterval(timerInterval);
    }

    function startTimer() {
        timerInterval = setInterval(() => {
            timePassed = timePassed += 1;
            timeLeft = TIME_LIMIT - timePassed;
            if (timeLeft < 0) {
                timeLeft = 0;
            }
            document.getElementById("base-timer-label").innerHTML = formatTime(
                timeLeft)
            setCircleDasharray();
            setRemainingPathColor(timeLeft);
            if (timeLeft === 0) {
                onTimesUp();
            }
        }, 1000);
    }

    function formatTime(time) {

        time = isNaN(time) == true ? 0 : time;

        const minutes = Math.floor(time / 60);
        let seconds = time % 60;

        if (seconds < 10) {
            seconds = `0${seconds}`;
        }
        return `${minutes}:${seconds}`;
    }

    function setRemainingPathColor(timeLeft) {
        const { alert, warning, info } = COLOR_CODES;
        if (timeLeft <= alert.threshold) {
            document
                .getElementById("base-timer-path-remaining")
                .classList.remove(warning.color);
            document
                .getElementById("base-timer-path-remaining")
                .classList.add(alert.color);
        } else if (timeLeft <= warning.threshold) {
            document
                .getElementById("base-timer-path-remaining")
                .classList.remove(info.color);
            document
                .getElementById("base-timer-path-remaining")
                .classList.add(warning.color);
        }
    }

    function calculateTimeFraction() {
        const rawTimeFraction = timeLeft / TIME_LIMIT;
        return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
    }

    function setCircleDasharray() {
        const circleDasharray = `${(
            calculateTimeFraction() * FULL_DASH_ARRAY
        ).toFixed(0)} 283`;
        document
            .getElementById("base-timer-path-remaining")
            .setAttribute("stroke-dasharray", circleDasharray);
    }

    function renderCountdown(dateStart, dateEnd) {
        let currentDate = dateStart.getTime();
        let targetDate = dateEnd.getTime();
        var getCountdown = function (c) {
            let secondsLeft = Math.round(((targetDate - currentDate) / 1000));
            if (secondsLeft < 0) {
                return 0;
            }
            return secondsLeft;
        }
        var seconds = getCountdown();
        return seconds;
    }

    function checkSpeechRecognitionSupport() {
        return window.SpeechRecognition || window.webkitSpeechRecognition;
    }

    function listener() {
        if (checkSpeechRecognitionSupport()) {
            const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.continuous = true;
            recognition.lang = "tr-TR";
            recognition.onresult = function (event) {
                const transcript = event.results[event.results.length - 1][0].transcript;
                console.log('Söylenen metin: ' + transcript);
                if (transcript.includes('sonraki') || transcript.includes('sonra ki')) {
                    moveQuestion("next");
                } else if (transcript.includes('önceki') || transcript.includes('önce ki')) {
                    moveQuestion("prev");
                }
                else if (transcript.includes("tümünü") && transcript.includes("oku")) { // soruyla ilgili her seyi seslendirir.
                    voiceProvider("Soru");
                    delay(400);
                    voiceProvider($(".active .question-text").text());
                    delay(400);
                    voiceProvider("Şıklar");
                    delay(400);
                    $(".active .form-check-label").each(function (e) {
                        voiceProvider($(this)[0].innerText);
                        delay(1000);
                    });
                }
                else if (transcript.includes("soruyu") && transcript.includes("oku")) { // sadece soruyu okur.
                    voiceProvider($(".active .question-text").text());

                }
                else if (transcript.includes("şıkları") && transcript.includes("oku")) { // sadece şıkları okur.
                    $(".active .form-check-label").each(function (e) {
                        voiceProvider($(this)[0].innerText);
                        delay(1000);
                    });
                }
                else if (transcript.includes("puanı") && transcript.includes("oku")) { // sadece puanı okur.
                    voiceProvider("Bu soru" + $(".active .point").attr("value") + "puandır.");
                }
                else if (transcript.includes("kalan") && transcript.includes("süre")) {
                    let time = $('.base-timer__label').text();
                    let parsedTime = time.split(":");
                    voiceProvider(parsedTime[0] + " dakika " + parsedTime[1] + " saniye kaldı.");
                }
                else if (transcript.includes("cevap")) {
                    var parsedArray = transcript.trim().split(" ");

                    if (parsedArray[1].includes("boş") || parsedArray[1].includes("bos")) {
                        $(".active #flexRadioDefault2")[0].checked = true;
                        voiceProvider("Cevabınız " + "boş" + " olarak kaydedildi.");
                    }
                    else {
                        selectChoice(parsedArray[1][0]);
                    }
                }
            };
            recognition.start();
        } else {
            console.error('Web Speech API desteklenmiyor.');
        }
    }

    function moveQuestion(type) {
        if (type == "next") {
            $(".carousel-control-next").trigger("click");
            voiceProvider("Sonraki soruya geçildi");
        } else {
            $(".carousel-control-prev").trigger("click");
            voiceProvider("Önceki soruya geçildi");
        }
    }

    function selectChoice(choice) {
        $(".active .form-check-input").each(function (e) {
            if ($(this)[0].value.toUpperCase() == choice.toUpperCase()) {
                $(this)[0].checked = true;
                voiceProvider("Cevabınız " + choice.toUpperCase() + " olarak kaydedildi.");
            }
        })
    }

    function verifyControl(userid) {
        $('html').css("pointer-events", "none");
        let timerInterval;
        let startTime = 10000;
        let period = 1000;
        Swal.fire({
            title: 'Lütfen konuşun, sesiniz kontrol edilecektir..<br>Doğrulama yapılmaması durumunda ekranınız kitlenecektir. Sayfayı yenileyerek tekrar doğrulamayı deneyebilirsiniz.',
            html: '<b id="recordTimer"></b> saniye kaldı.',
            timer: 11000,
            timerProgressBar: true,
            didOpen: () => {
                callVerifyApi(userid);
                Swal.showLoading();
                const b = document.getElementById("recordTimer");
                timerInterval = setInterval(() => {
                    b.innerHTML = startTime / 1000;
                    startTime = (startTime - period);
                    if (startTime == 1000) {
                        clearInterval(this);
                    }
                }, 1000)
            }
        })
    }

    function callVerifyApi(userid) {
        $.ajax({
            type: "get",
            url: "http://localhost:5000/control/" + userid,
            success: function (res) {
                if (res == "verify") {
                    responseVerify("success", "Doğrulama başarılı.");
                    $('html').css("pointer-events", "");
                } else {
                    responseVerify("error", "Doğrulama başarısız. Yeniden deneyiniz.");
                }
            },
            error: function (err) {
                if (err == "noverify")
                    responseVerify("error", "Doğrulama başarısız. Yeniden deneyiniz.");
            }
        })
    }

    function responseVerify(type, message) {
        Swal.fire({
            position: 'top-end',
            icon: type,
            title: message,
            showConfirmButton: false,
            timer: 1500
        })
    }

    function voiceProvider(text) {
        if ('speechSynthesis' in window) {
            var konusma = new SpeechSynthesisUtterance(text);
            konusma.lang = 'tr-TR';
            speechSynthesis.speak(konusma);
        } else {
            alert("Tarayıcınız metni seslendirmeyi desteklemiyor.");
        }
    }

    function delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
</script>
